@page "/DeckPage/{DeckId:int}"
@inject IMediator Mediator
@if (_deck is not null)
{
    <div class="deckview-container">
    <p>Deck Name: <span class="deckname">@_deck.Name</span></p>
    <p># of cards in <span class="deckname">@_deck.Name</span>: <span class="numberofcards">@_deck.NumberOfCards</span>
    </p>

    <StudyDeck Deck="@_deck"/>
    <hr width="100%">
    <AddCard Deck="@_deck" OnCardAdded="UpdateUi"/>
    </div>
    <button @onclick="Save">Save dat shit</button>
    <p>@_saveMessage</p>
}
@code {
    [Parameter] public int DeckId { get; set; }
    private DeckDto _deck { get; set; }
    private string _saveMessage = "derp";
    public void UpdateUi()
    {
        StateHasChanged();
    }
    private async Task Save()
    {
        var response = await Mediator.Send(new EditDeckRequest(_deck));
        if (response.IsSuccess)
        {
            _saveMessage = "it worked!";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Mediator.Send(new GetDeckRequest(DeckId));
            _deck = new DeckDto
                {
                    Id = response.Deck.Id,
                    Name = response.Deck.Name,
                    Topic = response.Deck.Topic,
                    NumberOfCards = response.Deck.NumberOfCards,
                    Stars = response.Deck.Stars,
                    Flashcards = response.Deck.Flashcards.Select(x => new FlashcardDto
                    {
                        Id = x.Id,
                        Frontside = x.Frontside,
                        Backside = x.Backside,
                        SubTopic = x.SubTopic,
                        DeckId = x.DeckId
                    }).ToList()
                };
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading Deck Data: {ex.Message}");
        }
    }
}
