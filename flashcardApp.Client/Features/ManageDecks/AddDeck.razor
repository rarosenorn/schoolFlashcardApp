@inject IDecksService DecksService

<div id="CreateDeck">
    <button @onclick="ShowCreateDeck">
        @if (_show)
        {
            <span>collapse</span>
        }
        else
        {
            <span>Add Deck</span>
        }
    </button>
    @if (_show)
    {
        @if (_submitSuccessful)
        {
            <SuccessAlert Message="Your deck has been added successfully!" />
        }
        else if (_errorMessage is not null)
        {
            <ErrorAlert Message="@_errorMessage" />
        }
        <EditForm Model="_deck" OnValidSubmit="SubmitForm">
            <FluentValidationValidator />
            <label for="deckName">Deck Name:</label>
            <InputText @bind-Value="_deck.Name" id="deckName" />
            <ValidationMessage For="@(() => _deck.Name)" />

            
            <button type="submit">Create</button>
        </EditForm>
    }
</div>

@code {
    private DeckDto _deck = new DeckDto();
    private bool _show = false;
    private bool _submitSuccessful;
    private string _errorMessage;
    [Parameter, EditorRequired] public EventCallback OnSubmitForm {get; set;}

    private void ShowCreateDeck()
    {
            _show = !_show;
    }
    private async Task SubmitForm()
    {
        await DecksService.CreateDeckAsync(_deck);
        _deck = new DeckDto();
        _submitSuccessful = true;
        _errorMessage = "nope";
        await OnSubmitForm.InvokeAsync();
    }
}