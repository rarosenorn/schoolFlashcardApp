@page "/DecksPage"
@inject IMediator Mediator

<div class="mydecks-container">
    <h1>My Decks</h1>
    <div class="decktable-container">
        <table>
            <thead>
                <th style="text-align: left;">Deck</th>
                <th class="thwidth">Cards</th>
                <th class="thwidth">Due</th>
                <th class="thwidth">Stars</th>
                <th class="thwidth">Settings</th>
            </thead>
            <tbody>
                @if (_decks != null)
                {
                    @foreach (var deck in _decks)
                    {
                        <tr>
                            <td>
                                <NavLink href=@($"/DeckPage/{@deck.Id}")>@deck.Name</NavLink>
                            </td>
                            <td>@deck.NumberOfCards</td>
                            <td>@deck.Stars</td>
                            <td><button @onclick="(() => DeleteDeckAsync(deck.Id))">Delete</button></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<AddDeck OnSubmitForm="AddLatestDeckAsync"/>

@code {
    private List<Deck> _decks { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await GetDecksAsync();
    }
    public async Task AddLatestDeckAsync()
    {
        var response = await Mediator.Send(new GetLatestDeckRequest());
        Deck deck = new() 
        {
            Id = response.Deck.Id,
            Name = response.Deck.Name,
            Topic = response.Deck.Topic,
            NumberOfCards = response.Deck.NumberOfCards,
            Stars = response.Deck.Stars
        };
        _decks.Add(deck);
    }
    private async Task GetDecksAsync()
    {
        try
        {
            var response = await Mediator.Send(new GetDecksRequest());
            _decks = response.Decks.Select(x => new Deck
                {
                    Id = x.Id,
                    Name = x.Name,
                    Topic = x.Topic,
                    NumberOfCards = x.NumberOfCards,
                    Stars = x.Stars
                }).ToList();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading Deck Data: {ex.Message}");
        }
    }
    private async Task DeleteDeckAsync(int deckId)
    {
        var request = new DeleteDeckRequest(deckId);
        var response = await Mediator.Send(request);
        if (response.IsSuccess)
        {
            Console.WriteLine("success");
            Deck deck = _decks.Where(x => x.Id == deckId).SingleOrDefault();
            _decks.Remove(deck);
        }
        else
        {
            Console.WriteLine("No bueno!?");
        }
    }
}