@page "/DecksPage"
@inject IDecksService DecksService

<div class="mydecks-container">
    <h1>My Decks</h1>
    <div class="decktable-container">
        <table>
            <thead>
                <th style="text-align: left;">Deck</th>
                <th class="thwidth">Cards</th>
                <th class="thwidth">Due</th>
                <th class="thwidth">Stars</th>
                <th class="thwidth">Settings</th>
            </thead>
            <tbody>
                @if (_decks != null)
                {
                    @foreach (var deck in _decks)
                    {
                        <tr>
                            <td>
                                <NavLink href=@($"/DeckPage/{@deck.Id}")>@deck.Name</NavLink>
                            </td>
                            <td>@deck.NumberOfCards</td>
                            <td>@deck.Stars</td>
                            <td><button @onclick="(() => DeleteDeckAsync(deck.Id))">Delete</button></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<AddDeck OnSubmitForm="AddLatestDeckAsync"/>

@code {
    private List<DeckDto> _decks { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await GetDecksAsync();
    }
    public async Task AddLatestDeckAsync()
    {
        DeckDto deckDto = await DecksService.GetLatestDeckAsync();
        @* DeckDto deckDto = await httpClient.GetFromJsonAsync<DeckDto>("/deck/latest"); *@
        _decks.Add(deckDto);
    }
    private async Task GetDecksAsync()
    {
        _decks = await DecksService.GetDecksAsync();
        @* _decks = await httpClient.GetFromJsonAsync<List<DeckDto>>("/deck"); *@
    }
    private async Task DeleteDeckAsync(int deckId)
    {
        await DecksService.DeleteDeckAsync(deckId);
        @* await httpClient.DeleteAsync($"/deck/{deckId}"); *@
        _decks.Remove(_decks.Find(x => x.Id == deckId));
    }
}